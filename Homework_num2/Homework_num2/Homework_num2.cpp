#include <iostream>
#include <cmath>
#include <fstream>
using namespace std;

int main(int argc, char* argv[])
{
	const int sizeVector = 52; //заполнение массива числами от 200 до 251
	int* arr = new int[sizeVector];
	for (int i = 0; i < sizeVector; i++)
	{
		arr[i] = rand(); // присваиваем элементам массива рандомные значения
		cout << arr[i] << "\t";
	}

	/* Задание №1 вывести четные по индексу элементы */

	cout << "\nTask 1" << endl;

	for (int i = 0; i < sizeVector; i++) // в этом цикл происходит проверерка условия на четность i-того элемента массива
	{
		if (i % 2 == 0) // остаток от деления i на 2 должен быть равен 0
		{
			cout << arr[i] << "\t";
		}
	}

	/* Задание №2 вывести нечетные по индексу элементы */

	cout << "\nTask 2" << endl;

	for (int i = 0; i < sizeVector; i++)// в этом цикл происходит проверерка условия на нечетность i-того элемента массива
	{
		if (i % 2 != 0)// остаток от деления i на 2 не должен быть равен 0
		{
			cout << arr[i] << "\t";
		}
	}

	/* Задание №3 вывести четные по значению элементы */

	// Примечание! Это задание отличается от предыдущего тем, что здесь необходимо работать со значениями элементов, а в прошлом с номерами элементов

	cout << "\nTask 3" << endl;

	for (int i = 0; i < sizeVector; i++) // в этом цикле происходит проверерка условия на четность значений элементов массива
	{
		if (arr[i] % 2 == 0) // остаток от деления arr[i] на 2 должен быть равен 0
		{
			cout << arr[i] << "\t";
		}
	}

	/* Задание №4 вывести нечетные по значению элементы*/

	cout << "\nTask 4" << endl;

	for (int i = 0; i < sizeVector; i++)// в этом цикле происходит проверерка условия на нечетность значений элементов массива
	{
		if (arr[i] % 2 != 0) // остаток от деления arr[i] на 2 не должен быть равен 0
		{
			cout << arr[i] << "\t";
		}
	}

	/*Задание №5 отсортировать массив по убыванию*/

	//для выполнения данного задания воспользуемся методом сортировки массива - bubble sort

	cout << "\nTask 5" << endl;

	int i = 0;
	int j = 0;
	// эти 2 переменные (i, j) нужны для сравнивания каждой пары чисел
	int temp = 0; // временная переменная

	for (int i = 0; i < sizeVector; i++) // в этом цикле происходит попарное сравнение чисел
	{
		for (j = i + 1; j < sizeVector; j++) // вложенный цикл который позволяет работать с парным числом, т.е тем которое стоит следующим
		{
			if (arr[i] < arr[j]) /* поскольку нам необходимо произвести сортировку по убыванию,
									то следует задать условие , которое переносит большее значение (т.е j) влево*/
			{
				temp = arr[i]; //присваиваем временной переменной значение i элементов массива
				arr[i] = arr[j]; //присваиваем массиву со значениями i, значения массива с элементами j
				arr[j] = temp; // присваиваем массиву со значениями j значение временной переменной
				/*таким образом пусть число i было = 5, то тогда становится j=6. Если 5 < 6 то происходит этот цикл,
				который в процессе сортировки массива по убыванию поменял числа местами и у нас получилились числа 6,5*/
			}
		}
		cout << arr[i] << "\t";
	}

	/*Задание №6 Вывести самое минимальное число*/

	cout << "\nTask 6" << endl;

	int min = arr[0]; // создадим переменную мин, которая будет равна нулевому элементу массива
	int max = min;
	for (i = 0; i < sizeVector; i++)/* цикл в котором происходит сравнение всех элементов массива с нулевым элементом,
									тем самым находиится минимальное и максимальное значение*/
	{
		if (arr[i] > max)
		{
			max = arr[i];
		}
		if (arr[i] < min)
		{
			min = arr[i];

		}
	}
	cout << min << endl;

	/*Задание №7 вывести самое максимальное число*/

	//воспользуемся циклом который мы создали в 6 номере

	cout << "\nTask 7" << endl;

	cout << max << endl;

	/*Задание №8 вывести среднее значение массива*/

	cout << "\nTask 8" << endl;
	int sumSQRT = 0; // создадим переменную для подсчета суммы квадратных значений
	int counter = 0;// счетчик
	for (int i = 0; i < sizeVector; i++)
	{
		counter++;
		sumSQRT += arr[i] * arr[i];// находим сумму всех квадратных значений
	}
	int result = sqrt(abs(sumSQRT) / counter);// выводим среднее значение по формуле: корень(|sumSQRT|/counter) 
	cout << result << endl;

	/*Задание №9 Вывести число которое будет иметь минимальную разницу*/

	cout << "\nTask 9" << endl;
	int c; // создадим переменную c которую мы будем вводить
	cout << "Enter C: " << endl;
	cin >> c;// ввод числа с клавиатуры
	int tempDifference = 100; //временная переменная c предельной разницей = 100
	int MinDifference = 0; // создадим переменную минимальной разницы
	for (int i = 0; i < sizeVector; i++)
	{
		int difference = abs(c - abs(arr[i]));/* Создаем переменную которая равна |с-|arr[i]||;
												 Эта переменная считает разницу между введенным числом и между каждым значением элемента массива*/
		if (difference < tempDifference)// Условие - если разница меньше предельной разницы
		{
			tempDifference = difference; /* предельная разница становится равной существующей (на самом деле этот код был совсем не обязателен
										 для работоспособности этой программы*/
			MinDifference = arr[i]; // минимальная разница становится равной значению элемента массива при его переборе
		}
	}
	cout << MinDifference << endl;

	/*Задание №10 записать это число в текстовый файл*/

	cout << "\nTask 10" << endl;

	ofstream out; // создадим поток ofstream out для вывода
	out.open("OUT.txt"); // эта команда открывает файл "OUT.txt" для вывода
	if (out.is_open()) /* условие позволяющее узнать открыт ли файл. Если результат программы окажется неудачным , то мы можем узнать
					   все ли в порядке при попытке открытия текстового файла*/
	{
		out << MinDifference << endl; // вывод переменной "MinDifference" в файл
	}
	cout << "Successfully written to file!" << endl; // Если программа завершилась успешно то программа нас об этом уведомит
	delete[] arr; // очистка массива
}


